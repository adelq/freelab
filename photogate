#!/usr/bin/ruby

require '/usr/bin/labpro/vernier.rb'

require 'gtk2'

def clean_up
  $lab_pro.reset
end

Gtk.init

# http://ruby-gnome2.sourceforge.jp/hiki.cgi?Gtk%3A%3AWindow
window = Gtk::Window.new("Photogate")
window.signal_connect("destroy") {
  clean_up()
  Gtk.main_quit
}
window.border_width = 10
window.set_window_position('center')
window.set_size_request(1000, 600)

hbox = Gtk::HBox.new
window.add(hbox)
hbox.border_width = 2

# http://ruby-gnome2.sourceforge.jp/hiki.cgi?tut-gtk2-txtw-scrolledwin
sw = Gtk::ScrolledWindow.new(nil,nil)
sw.set_policy(Gtk::POLICY_NEVER, Gtk::POLICY_ALWAYS) # horizontal, vertical

# http://ruby-gnome2.sourceforge.jp/hiki.cgi?Gtk%3A%3ATextView
tv = Gtk::TextView.new
tv.cursor_visible = false
tv.editable = false
tv.modify_font(Pango::FontDescription.new("bold 32")) # http://www.pygtk.org/docs/pygtk/class-pangofontdescription.html
# http://www.ruby-forum.com/topic/119851 :
tv.signal_connect("size-allocate") do |widget, step, arg2|
  sw.vadjustment.value = sw.vadjustment.upper -  sw.vadjustment.page_size
end
# http://gtk2-perl.sourceforge.net/doc/pod/Gtk2/TextBuffer.html
$buff = tv.buffer

sw.add(tv)

#---------------------------

$lab_pro = nil
$photogate = nil
begin
  $lab_pro=LabPro.new
  $photogate=Photogate.new($lab_pro)
  $photogate.exceptions.each {|e| raise e,e.message}
rescue VernierException => e
  describe_error = $!
  md = Gtk::MessageDialog.new(window,
            Gtk::Dialog::DESTROY_WITH_PARENT,
            {"info"=>Gtk::MessageDialog::INFO,"warn"=>Gtk::MessageDialog::WARNING,"error"=>Gtk::MessageDialog::ERROR}[e.severity], 
            Gtk::MessageDialog::BUTTONS_OK, describe_error)
  md.run
  md.destroy
  if e.severity=='error' then
    if e.sensor!=nil then clean_up end # If it's just a sensor error, try to tidy up the LoggerPro itself before quitting.
    exit(-1)
  end
end

def clear_data
  $buff.set_text('')
  $count_data = 0
  $n_read = 0
  $photogate.clear_data
end
clear_data

#---------------------------

$collecting = true

vbox = Gtk::VBox.new
$indicator = Gtk::TextView.new
$indicator.cursor_visible = false
$indicator.editable = false
$indicator.modify_font(Pango::FontDescription.new("bold 32"))
def update_state_indicator
  $indicator.buffer.set_text($collecting ? 'Collecting' : 'Paused')
end
update_state_indicator()
vbox.pack_start($indicator,false,false,2)

# buttons:
[
  ['Collect',      'collect',       proc {if !$collecting then $collecting=true; $photogate.activate;   update_state_indicator(); $n_read = 0 end}],
  ['Pause',        'pause',         proc {if $collecting then $collecting=false; $photogate.inactivate; update_state_indicator() end}],
  ['Clear Data',   'clear_data',    proc {clear_data}]
].each {|b|
  (label,key,action) = b
  button = Gtk::Button.new(label)
  vbox.pack_start(button,false,false,2)
  button.signal_connect('clicked') { action.call }
}
hbox.pack_start(vbox,false,false,2) # pack_start: (child,expand,fill,padding), http://www.pygtk.org/docs/pygtk/class-gtkbox.html
hbox.pack_start(sw,true,true,2)

window.show_all

GLib::Timeout.add(200) { # time in milliseconds
  if $photogate.n>$n_read && $collecting then
    dt = $photogate.dt
    dt.each { |x|
      $count_data = $count_data+1
      $n_read = $n_read+1
      printable_x = sprintf("%10.6f",x)
      $buff.insert($buff.end_iter(),"#{$count_data}. #{printable_x} s\n") # http://gtk2-perl.sourceforge.net/doc/pod/Gtk2/TextIter.html
    }
  end
  true
}

Gtk.main
